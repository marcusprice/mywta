{"version":3,"sources":["assets/icons/search.svg","assets/icons/info.svg","assets/icons/hike-info.svg","assets/icons/location.svg","assets/icons/map.svg","assets/icons/about.svg","components/Map.jsx","components/HikeBar.jsx","components/MenuItem.jsx","components/Menu.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Map","props","useState","map","setMap","userLocationMarkers","useRef","initialLoad","useEffect","window","initMap","googleMap","google","maps","document","getElementById","disableDefaultUI","zoomControl","zoom","center","lat","lng","googleScript","createElement","async","defer","src","getElementsByTagName","appendChild","userLocation","enabled","userCoords","accuracy","locationCircles","push","Marker","clickable","cursor","position","icon","path","SymbolPath","CIRCLE","fillColor","fillOpacity","scale","strokeWeight","draggable","strokeColor","Circle","radius","strokeOpacity","zIndex","current","length","forEach","marker","setCenter","setZoom","querySelector","addEventListener","panTo","id","HikeBar","className","info","alt","MenuItem","search","hikeInfo","location","about","Menu","App","setUserLocation","navigator","geolocation","watchPosition","coords","latitude","longitude","onresize","body","height","innerHeight","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd25b79c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.698ee69a.svg\";","module.exports = __webpack_public_path__ + \"static/media/info.4eb24737.svg\";","module.exports = __webpack_public_path__ + \"static/media/hike-info.9ae34461.svg\";","module.exports = __webpack_public_path__ + \"static/media/location.84b8f6ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/map.d4531081.svg\";","module.exports = __webpack_public_path__ + \"static/media/about.096e9c83.svg\";","import React, { useState, useEffect, useRef } from 'react';\n\nconst Map = (props) => {\n  const [map, setMap] = useState(null); //this never really changes after it's set, but state is the best solution to maintain the map on rerender\n  const userLocationMarkers = useRef([]);\n  const initialLoad = useRef(false);\n\n  //loads map after initial render (only runs once)\n  useEffect(() => {\n    //first add the initMap method to the window object (called by google maps uri callback)\n    window.initMap = () => {\n      //initMap creates a google map after the google maps resources have been loaded\n      const google = window.google;\n      //intialize with WA coordinates\n      const wa = { lat: 47.7511, lng: -120.7401 };\n\n      //the map\n      const googleMap = new google.maps.Map(\n        document.getElementById('map'), {\n          disableDefaultUI: true,\n          zoomControl: true,\n          zoom: 6,\n          center: wa,\n        }\n      );\n\n      //set the google map\n      setMap(googleMap);\n\n      //init map no longer needed\n      delete window.initMap;\n    }\n\n    //add script tag to call google maps api\n    let googleScript = document.createElement('script');\n    googleScript.async = true;\n    googleScript.defer = true;\n    googleScript.src = 'https://maps.googleapis.com/maps/api/js?key=' + process.env.REACT_APP_GOOGLE_MAPS_API_KEY + '&callback=initMap';  //calls initMap onload\n    document.getElementsByTagName('body')[0].appendChild(googleScript);\n  }, []);\n\n  //update map when user's location changes\n  useEffect(() => {\n    if(map && props.userLocation.enabled) { //only run if the user's location is enabled and the map has loaded\n      const google = window.google;\n      const userCoords = { lat: props.userLocation.lat, lng: props.userLocation.lng };\n      let accuracy = props.userLocation.accuracy;\n      const locationCircles = [];\n\n      //inner location circle\n      locationCircles.push(new google.maps.Marker({\n        clickable: false,\n        cursor: 'pointer',\n        position: userCoords,\n        icon: {\n            path: google.maps.SymbolPath.CIRCLE,\n            fillColor: '#C8D6EC',\n            fillOpacity: 0.7,\n            scale: 12,\n            strokeWeight: 0,\n        },\n        draggable: false,\n        map: map\n      }));\n\n      //outer location circle\n      locationCircles.push(new google.maps.Marker({\n        clickable: false,\n        cursor: 'pointer',\n        position: userCoords,\n          icon: {\n            path: google.maps.SymbolPath.CIRCLE,\n            fillColor: '#4285F4',\n            fillOpacity: 1,\n            scale: 6,\n            strokeColor: 'white',\n            strokeWeight: 2,\n          },\n          draggable: false,\n          map: map\n      }));\n\n      if(props.userLocation.accuracy < 1000) {\n        //only make an accuracy range if the accuracy is reasonable (to avoid massive circle on map)\n        //accuracy range\n        locationCircles.push(new google.maps.Circle({\n          map: map,\n          center: userCoords,\n          clickable: false,\n          cursor: 'pointer',\n          radius: accuracy,\n          strokeColor: '1bb6ff',\n          strokeOpacity: .4,\n          fillColor: '61a0bf',\n          fillOpacity: .4,\n          strokeWeight: 1,\n          zIndex: 1\n        }));\n      }\n\n      //remove old markers if they are there\n      if(userLocationMarkers.current.length > 0) {\n        userLocationMarkers.current.forEach(marker => {\n          marker.setMap(null);\n          marker = null;\n        });\n      }\n\n      //add the user's marker to the array\n      userLocationMarkers.current = locationCircles;\n\n      //center the map over the user if it's the first time loading\n      if(!initialLoad.current) {\n        map.setCenter(userCoords);\n        map.setZoom(14);\n        initialLoad.current = true;\n      }\n    }\n\n  }, [props.userLocation, map]);\n\n\n  useEffect(() => {\n    if(map) {\n      //when user clicks location icon\n      document.querySelector('.location')\n        .addEventListener('click', () => {\n          map.panTo({lat: props.userLocation.lat, lng: props.userLocation.lng});\n        });\n    }\n  }, [map, props.userLocation.lat, props.userLocation.lng]);\n\n  return(\n    <div id=\"map\" />\n  )\n}\n\nexport default Map;\n","import React from 'react';\nimport info from '../assets/icons/info.svg';\n\nconst HikeBar = () => {\n  return(\n    <div className=\"hike-bar\">\n      <span className=\"hike-bar-title\">mywta</span>\n      <img className=\"info-icon\" src={info} alt=\"info icon\"/>\n    </div>\n  )\n}\n\nexport default HikeBar;\n","import React from 'react';\nimport search from '../assets/icons/search.svg';\nimport hikeInfo from '../assets/icons/hike-info.svg';\nimport location from '../assets/icons/location.svg';\nimport map from '../assets/icons/map.svg';\nimport about from '../assets/icons/about.svg';\n\nconst MenuItem = (props) => {\n  let icon, alt;\n  let className = '';\n  switch(props.icon) {\n    case 'search':\n      icon = search;\n      alt = 'search icon';\n      break;\n    case 'hike-info':\n      icon = hikeInfo;\n      alt = 'hike info';\n      break;\n    case 'location':\n      icon = location;\n      alt = 'location pin icon';\n      className = 'location';\n      break;\n    case 'map':\n      icon = map;\n      alt = 'map icon';\n      break;\n    case 'about':\n      icon = about;\n      alt = 'bear head';\n      break;\n    default:\n      icon = search;\n      alt = 'search icon';\n      break;\n  }\n\n  return(\n    <li className=\"menu-item\">\n      <img className={'menu-item-icon ' + className}src={icon} alt={alt} />\n    </li>\n  )\n}\n\nexport default MenuItem;\n","import React from 'react';\nimport MenuItem from './MenuItem';\n\nconst Menu = () => {\n  return(\n    <nav>\n      <ul className=\"menu\">\n        <MenuItem icon=\"search\"/>\n        <MenuItem icon=\"hike-info\"/>\n        <MenuItem icon=\"location\" />\n        <MenuItem icon=\"map\"/>\n        <MenuItem icon=\"about\"/>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Menu;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Map from './components/Map';\nimport HikeBar from './components/HikeBar';\nimport Menu from './components/Menu';\n\nconst App = () => {\n  const [userLocation, setUserLocation] = useState({ enabled: false, lat: 47.7511, lng: -120.7401, accuracy: 0 }); //defaults to washington coordinates\n\n  //gets user's position for the map & hike radius\n  navigator.geolocation.watchPosition((position) => {\n    setUserLocation({\n      enabled: true,\n      lat: position.coords.latitude,\n      lng: position.coords.longitude,\n      accuracy: position.coords.accuracy\n    });\n  });\n\n  //handles viewport bug for 100vh\n  window.onresize = () => {\n    document.body.height = window.innerHeight;\n  }\n\n  window.onresize();\n\n  return (\n    <div className=\"app\">\n      <HikeBar />\n      <Map userLocation={userLocation} />\n      <Menu />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}